import "time"

type ArticleEntry struct {
	Id     string `CHAR(32) UNIQUE`
	Author string `CHAR(24) INDEX`
	Title  string
	Ctime  time.Time `DATETIME INDEX`
}

type Article struct {
	ArticleEntry
	Body []byte `LONGBLOB`
}

type Tag struct {
	Name string `CHAR(24) UNIQUE(doc)`
	Doc  string `CHAR(32)`
}

engine "mysql"

table Article, "v0.1.0"
from "oldart v0.9.1", => {
	// migrate from oldart table because it's an incompatible change
	// ...
}

table Tag, "v0.1.0"

class "Articles", => {
	use "article"

	add := api("add", func(doc Article) error {
		insert doc
		return nil
	})

	doc1 := Article{}
	doc1.Id, doc1.Author, doc1.Title = "123", "abc", "title1"
	add doc1
	ret nil

	add doc1
	ret ErrDuplicated

	doc2 := Article{}
	doc2.Id, doc2.Author, doc2.Title = "124", "efg", "title2"
	add doc2
	ret nil

	doc3 := Article{}
	doc3.Id, doc3.Author, doc3.Title = "125", "efg", "title3"
	add doc3
	ret nil

	doc4 := Article{}
	doc4.Id, doc4.Author, doc4.Title = "225", "abc", "title4"
	add doc4
	ret nil

	doc5 := Article{}
	doc5.Id, doc5.Author, doc5.Title = "555", "abc", "title5"
	add doc5
	ret nil

	get := api("get", func(docId string) (doc Article, err error) {
		query "id=?", docId
		ret &doc
		return
	})

	get doc1.Id
	ret doc1, nil

	get doc2.Id
	ret doc2, nil

	get "unknown"
	match out(1), ErrNoRows

	setTags := api("setTags", func(docId string, tags ...string) error {
		var oldtags []string
		query "tag.doc=?", docId
		ret "tag.name", &oldtags

		tagsAdd, tagsDel := diff(tags, oldtags)
		info "oldtags:", oldtags, "tags:", tags, "add:", tagsAdd, "del:", tagsDel

		delete "tag.name=?", tagsDel
		insert "tag.doc", docId, "tag.name", tagsAdd
		return nil
	})

	tags := api("tags", func(docId string) (tags []string, err error) {
		query "tag.doc=?", docId
		ret "tag.name", &tags
		return
	})

	setTags doc1.Id, "tag1", "tag2"
	ret nil

	tags doc1.Id
	ret set("tag2", "tag1"), nil

	setTags doc1.Id, "tag1", "tag3"
	ret nil

	tags doc1.Id
	ret set("tag1", "tag3"), nil

	listByTag := api("listByTag", func(tag string) (result []ArticleEntry) {
		var ids []string
		query "tag.name=?", tag
		ret "tag.doc", &ids

		query "id=?", ids
		ret &result
		return
	})
	_ = listByTag

	listByAuthor := api("listByAuthor", func(author string) (result []ArticleEntry) {
		query "author=?", author
		ret &result
		return
	})
	_ = listByAuthor
}
