import (
	"time"

	_ "github.com/goplus/yap/ydb/mysql"
	_ "github.com/goplus/yap/ydb/sqlite3"
)

type User struct {
	Id       string `id CHAR(32) UNIQUE`
	Spwd     string
	Salt     string
	Nickname string
	Email    string    `CHAR(64) INDEX`
	Tel      string    `CHAR(16) INDEX`
	Born     time.Time `INDEX`
	Ctime    time.Time `DATETIME(6) INDEX`
}

type ArticleEntry struct {
	Id     string `CHAR(32) UNIQUE`
	Author string `CHAR(24) INDEX`
	Title  string
	Ctime  time.Time `DATETIME INDEX`
}

type Article struct {
	ArticleEntry
	Body []byte `LONGBLOB`
}

type Tag struct {
	Name    string `CHAR(24) UNIQUE(article)`
	Article string `CHAR(32)`
}

engine "mysql"

table User, "user v0.1.0"

table Article, "v0.1.0"
from "oldart v0.9.1", => {
	// migrate from oldart table because it's an incompatible change
	// ...
}

table Tag, "v0.1.0"

class "Users", => {
	use "user"

	api "register", func(id, pwd, nickname, email, tel string, ctime time.Time) error {
		if email == "" && tel == "" {
			return ErrNoEmailAndTel
		}
		limit 3, "email=?", email // one email can't register >3 accounts
		limit 3, "tel=?", tel

		salt := rand
		spwd := hs256(pwd, salt)
		insert &User{Id: id, Spwd: spwd, Salt: salt, Nickname: nickname, Email: email, Tel: tel, Ctime: ctime}
		return nil
	}
	call "user", "pwd", "nickname", "", "", time.now
	ret ErrNoEmailAndTel
	call "user", "pwd", "nickname", "user@foo.com", "", time.now
	ret nil
	call "user", "pwd", "nickname", "user@foo.com", "13500000000", time.now
	ret ErrDuplicated

	api "login", func(id, pwd string) bool {
		var spwd, salt string
		query "id=?", id
		ret "salt", &salt, "spwd", &spwd
		return hs256(pwd, salt) == spwd
	}
	call "", ""
	ret false
	call "user", "pwd"
	ret true
}

class "Articles", => {
	use "article"

	api "listByTag", func(tag string) (result []ArticleEntry) {
		var ids []string
		query "tag.name=?", tag
		ret "tag.article", &ids

		query "id=?", ids
		ret &result
		return
	}

	api "listByAuthor", func(author string) (result []ArticleEntry) {
		query "author=?", author
		ret &result
		return
	}
}
